{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyP57HSD9NKCbsW7MrG4vNaB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/FUHannes/Deep-Learning/blob/main/Ex04/TL_hannes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "buV0EqYdGwi5"
      },
      "source": [
        "import keras\n",
        "import keras.applications as kapps\n",
        "from keras.preprocessing import image\n",
        "import numpy as np"
      ],
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CIwdrxXNMP3R"
      },
      "source": [
        "from keras.models import Model\n",
        "from keras.layers import Dense\n",
        "from keras.layers import Flatten"
      ],
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XPtrxSmvMHgo"
      },
      "source": [
        "# load pretrained model and specify a new input shape for images\n",
        "new_input = keras.Input(shape=(32, 32, 3))\n",
        "model_orig = kapps.vgg16.VGG16(include_top=False, input_tensor=new_input)"
      ],
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TkJ9YBPBMp3i"
      },
      "source": [
        "# our new classifier\n",
        "flat1 = Flatten()(model_orig.layers[-1].output)\n",
        "class1 = Dense(512, activation='relu')(flat1)\n",
        "output = Dense(3, activation='softmax')(class1)"
      ],
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hc5uLry7M158"
      },
      "source": [
        "# complete model\n",
        "model = Model(inputs=model_orig.inputs, outputs=output)\n",
        "#model.summary()"
      ],
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h5tv-a_ZODdn"
      },
      "source": [
        "# freeze known layers\n",
        "for layer in model.layers[:-2]:\n",
        "    layer.trainable = False"
      ],
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "67VNoSfOO-d1"
      },
      "source": [
        "# Compile model\n",
        "epochs = 40\n",
        "lrate = 0.01\n",
        "batch_size = 32\n",
        "decay = lrate/epochs\n",
        "sgd = tf.keras.optimizers.SGD(lr=lrate, momentum=0.9, decay=decay, nesterov=False)\n",
        "model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])"
      ],
      "execution_count": 57,
      "outputs": []
    }
  ]
}